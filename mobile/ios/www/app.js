// Generated by CoffeeScript 1.4.0
(function() {
  var Tasks;

  Tasks = (function() {

    function Tasks() {}

    Tasks.prototype.items = [];

    Tasks.prototype.load = function() {
      var json;
      json = localStorage.getItem(this.storeKey());
      if (json) {
        return this.items = JSON.parse(json);
      }
    };

    Tasks.prototype.save = function() {
      var json;
      json = JSON.stringify(this.items);
      return localStorage.setItem(this.storeKey(), json);
    };

    Tasks.prototype.storeKey = function() {
      var date;
      date = new Date;
      return "tasks-" + (date.toISOString().substring(0, 10));
    };

    Tasks.prototype.clear = function() {
      var json;
      this.items = [];
      return json = localStorage.getItem(this.storeKey());
    };

    Tasks.prototype.get = function(index) {
      return this.items[index];
    };

    Tasks.prototype.add = function(task) {
      var index;
      index = this.items.length;
      this.items.push(task);
      this.save();
      this.renderTask(task, index);
      return this.focusOn(index);
    };

    Tasks.prototype.renderIn = function(list) {
      var index, task, _i, _len, _ref, _results;
      this.list = list;
      this.list.empty();
      _ref = this.items;
      _results = [];
      for (index = _i = 0, _len = _ref.length; _i < _len; index = ++_i) {
        task = _ref[index];
        _results.push(this.renderTask(task, index));
      }
      return _results;
    };

    Tasks.prototype.render = function() {
      if (this.list) {
        return this.renderIn(this.list);
      }
    };

    Tasks.prototype.renderTask = function(task, index) {
      if (task.title.trim() !== "") {
        return this.list.prepend("<div class=\"row task " + (task.completed ? "completed" : "") + "\"\n  data-index=\"" + index + "\">\n  <input type=\"checkbox\" " + (task.completed ? "checked" : "") + ">\n  <input type=\"text\" value=\"" + task.title + "\">\n</div>");
      }
    };

    Tasks.prototype.focusOn = function(index) {
      var focusOnTask;
      focusOnTask = function() {
        return $(".task[data-index='" + index + "'] input[type='text']").focus();
      };
      return setTimeout(focusOnTask, 1);
    };

    return Tasks;

  })();

  $(function() {
    var IS_MOBILE, TAP, button, getTaskIndexOf, list, listResize, tasks;
    IS_MOBILE = $.os.ios || $.os.android;
    TAP = IS_MOBILE ? 'tap' : 'click';
    tasks = new Tasks;
    tasks.load();
    list = $('.list');
    tasks.renderIn(list);
    listResize = function() {
      return list.css('height', $(window).height() - 47);
    };
    setTimeout(listResize, 100);
    button = $('.navbar .button');
    button.on('touchStart', function() {
      return $(this).addClass('tap');
    });
    button.on(TAP, function() {
      $(this).removeClass('tap');
      return tasks.add({
        title: 'New task'
      });
    });
    getTaskIndexOf = function(el) {
      return el.closest('.task').attr('data-index');
    };
    list.on('keyup', 'input[type=text]', function(e) {
      if (e.keyCode === 13) {
        return $(this).blur();
      }
    });
    list.on('change', 'input[type=text]', function() {
      var index, input, task;
      input = $(this);
      index = getTaskIndexOf(input);
      task = tasks.get(index);
      task.title = input.val();
      tasks.save();
      if (task.title.trim() === "") {
        return tasks.render();
      }
    });
    return list.on('change', 'input[type=checkbox]', function() {
      var checkbox, index, task, taskEl;
      checkbox = $(this);
      taskEl = checkbox.closest('.task');
      index = getTaskIndexOf(checkbox);
      task = tasks.get(index);
      task.completed = checkbox.attr('checked');
      tasks.save();
      if (task.completed) {
        return taskEl.addClass('completed');
      } else {
        return taskEl.removeClass('completed');
      }
    });
  });

}).call(this);
